<?php

namespace SymfonyFullAuthBundle\FormExtension;

use Doctrine\ORM\EntityManagerInterface;
use Doctrine\ORM\Mapping\MappingException;
use Symfony\Component\Form\AbstractTypeExtension;
use Symfony\Component\Form\Extension\Core\Type\FormType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\Form\FormError;
use Symfony\Component\Form\FormEvent;
use Symfony\Component\Form\FormEvents;
use Symfony\Component\OptionsResolver\OptionsResolver;
use SymfonyFullAuthBundle\Form\FormException;
use function PHPUnit\Framework\isEmpty;

class FormTypeExtension extends AbstractTypeExtension
{
    public function __construct(private readonly EntityManagerInterface $entityManager)
    {
    }


    /**
     * @inheritdoc
     */
    public function buildForm(FormBuilderInterface $builder, array $options): void
    {
        $builder->addEventListener(FormEvents::POST_SUBMIT, function (FormEvent $event) {
            $form = $event->getForm();
            $data = $event->getData();


            $allow_exception = $form->getConfig()->getOption("allow_exception");
            $formErrors = $form->getErrors(true);
//            dump($form->getName(),$formErrors->count());
            if($formErrors->count()){
                $errors = [];
                $errorMessage  = null;
                /** @var FormError $formError */
                foreach ($formErrors as $formError) {
                    if(empty($errorMessage)){
                        $errorMessage = $formError->getMessage();
                    }
                    $errors[$formError->getOrigin()->getName()][] = $formError->getMessage();
                }
//                dd($errors);
//                dump($form->getName(),$allow_exception,$errors);
                if($allow_exception){
                    throw new FormException($errorMessage,$errors);
                }
            }else{
                $dataClass = $form->getConfig()->getDataClass();
                if(!empty($dataClass) && is_object($data)){
                    try {
                        $this->entityManager->getClassMetadata($dataClass);
                        $this->entityManager->persist($data);
                    }catch (\Exception $exception){

                    }

                }
            }
        });

        $builder->addEventListener(FormEvents::PRE_SET_DATA, function (FormEvent $event) {

            $excludeFields = $event->getForm()->getConfig()->getOption(FormCustomOptions::EXCLUDE_FIELDS);

            if (!empty($excludeFields)) {
                foreach ($excludeFields as $excludeField) {
                    $event->getForm()->remove($excludeField);
                }
            }


        });
    }

    public function configureOptions(OptionsResolver $resolver): void
    {
        $resolver->setDefined(FormCustomOptions::EXCLUDE_FIELDS);
        $resolver->setAllowedTypes(FormCustomOptions::EXCLUDE_FIELDS, 'array');
        $resolver->setDefined('allow_exception');
        $resolver->setAllowedTypes('allow_exception', 'bool'); // sadece boolean türüne izin veriyoruz
        $resolver->setDefault("allow_exception",true);
        $resolver->setDefault("csrf_protection",false);
        $resolver->setDefault("csrf_message","Please try to resubmit the form.");
        parent::configureOptions($resolver); // TODO: Change the autogenerated stub
    }

    public static function getExtendedTypes(): iterable
    {
        return [FormType::class];
    }
}
