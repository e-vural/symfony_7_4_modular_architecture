<?php

namespace App\Form\Auth\User\FieldType;

use App\Form\AbstractForm;
use Symfony\Component\Form\Event\PostSubmitEvent;
use Symfony\Component\Form\Extension\Core\Type\PasswordType;
use Symfony\Component\OptionsResolver\OptionsResolver;
use SymfonyFullAuthBundle\Validator\Password\PasswordStrength;


class UserPassword extends AbstractForm
{
   const CHILD_NAME = "password";

//    public static function addToBuilder(FormBuilderInterface $builder, array $options = []): FormBuilderInterface
//    {
//
//        $builder->add("password", UserPasswordType::class,
//            $options
////            ["constraints" => [
////            new \SymfonyFullAuthBundle\Validator\PasswordStrength(),
////        ]]
//        );
//        $builder->addEventListener(FormEvents::PRE_SUBMIT, function (PreSubmitEvent $event) {
//
//
//        });
//        return $builder;
//    }

//    public function buildForm(FormBuilderInterface $builder, array $options)
//    {
//        $builder->addEventListener(FormEvents::POST_SUBMIT, function (PostSubmitEvent $event) {
//            $this->postSubmitProcesses($event);
//
//        });
//        parent::buildForm($builder, $options); // TODO: Change the autogenerated stub
//    }

    public function configureOptions(OptionsResolver $resolver): void
    {

        $resolver->setDefault("constraints",[
            new PasswordStrength(),
        ]);

//        $help = "The password must be at least 8 characters long, consist of a number, an uppercase and a lowercase letter";
        $help = "";
        $resolver->setDefaults(
            [
                "attr" => ["autocomplete" => "new-password","class" => "password-strength-meter"],
                "required" => true,
                "help" =>"$help",
                'property_path' => "password",
                "documentation" => ["type" => "string", "description" => "$help",]
            ]);
    }

    public function getParent()
    {
        return PasswordType::class;

    }

    private function passwordEncoder(PostSubmitEvent $event): void
    {
        // TODO Burası ayrı bir yerde olsun. BUrada private bir fonksiyon da olabilir servis içerisinde de. Dışarıda kullanıma bağlı. Eğer dışarıda da kullanılacaksa servis olmalı.
        // TODO Private olacaksa trait içinde olabilir
        // TODO Burada password için kural kontrolleri yapılabilir. Assert min yemez. çünkü kontrol edilen değer şifreli olduğu için 123 bile girse geçiyor. Hash öncesi kontrol gerekli.
//        $user = $event->getData();
//        dd($event);
//        $password = $user->getPassword();
//        $encodedPassword = $this->passwordHasher->hashPassword($user, $password);
//        $user->setPassword($encodedPassword);
    }

    public function postSubmitProcesses(PostSubmitEvent $event): void
    {
        $this->passwordEncoder($event);
//        $this->entityControl($event);
    }
}
